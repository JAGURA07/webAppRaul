{"ast":null,"code":"export const openDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"AdminDB\", 1);\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(\"alumnos\")) {\n        const store = db.createObjectStore(\"alumnos\", {\n          keyPath: \"uid\"\n        });\n        store.createIndex(\"nombre\", \"nombre\", {\n          unique: false\n        });\n      }\n    };\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(\"Error al abrir la base de datos\");\n  });\n};\nexport const addAlumno = async alumno => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"alumnos\", \"readwrite\");\n    const store = transaction.objectStore(\"alumnos\");\n    const request = store.add(alumno);\n    request.onsuccess = () => resolve(\"Alumno registrado con éxito\");\n    request.onerror = () => reject(\"Error al registrar alumno\");\n  });\n};\nexport const getAlumno = async v2xYcTFbHxUksz5hVHzDn7yCdCx1 => {\n  console.log(\"Buscando alumno con UID:\", v2xYcTFbHxUksz5hVHzDn7yCdCx1);\n  try {\n    const db = await openDB();\n    console.log(\"Base de datos abierta:\", db);\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(\"alumnos\", \"readonly\");\n      const store = transaction.objectStore(\"alumnos\");\n      const request = store.get(v2xYcTFbHxUksz5hVHzDn7yCdCx1);\n      request.onsuccess = () => {\n        console.log(\"Alumno encontrado:\", request.result);\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        console.error(\"Error al obtener el alumno\");\n        reject(\"Alumno no encontrado\");\n      };\n    });\n  } catch (error) {\n    console.error(\"Error al abrir la base de datos:\", error);\n  }\n};\nexport const getAllAlumnos = async () => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"alumnos\", \"readonly\");\n    const store = transaction.objectStore(\"alumnos\");\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(\"No se pudieron obtener los alumnos\");\n  });\n};","map":{"version":3,"names":["openDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","store","createObjectStore","keyPath","createIndex","unique","onsuccess","onerror","addAlumno","alumno","transaction","objectStore","add","getAlumno","v2xYcTFbHxUksz5hVHzDn7yCdCx1","console","log","get","error","getAllAlumnos","getAll"],"sources":["/home/jagura/Desktop/webapp/src/database/db.js"],"sourcesContent":["export const openDB = () => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(\"AdminDB\", 1);\n  \n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n  \n        if (!db.objectStoreNames.contains(\"alumnos\")) {\n          const store = db.createObjectStore(\"alumnos\", { keyPath: \"uid\" });\n          store.createIndex(\"nombre\", \"nombre\", { unique: false });\n        }\n      };\n  \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(\"Error al abrir la base de datos\");\n    });\n  };\n  \n  export const addAlumno = async (alumno) => {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(\"alumnos\", \"readwrite\");\n      const store = transaction.objectStore(\"alumnos\");\n      const request = store.add(alumno);\n  \n      request.onsuccess = () => resolve(\"Alumno registrado con éxito\");\n      request.onerror = () => reject(\"Error al registrar alumno\");\n    });\n  };\n  \n  export const getAlumno = async (v2xYcTFbHxUksz5hVHzDn7yCdCx1) => {\n    console.log(\"Buscando alumno con UID:\", v2xYcTFbHxUksz5hVHzDn7yCdCx1);\n  \n    try {\n      const db = await openDB();\n      console.log(\"Base de datos abierta:\", db);\n  \n      return new Promise((resolve, reject) => {\n        const transaction = db.transaction(\"alumnos\", \"readonly\");\n        const store = transaction.objectStore(\"alumnos\");\n        const request = store.get(v2xYcTFbHxUksz5hVHzDn7yCdCx1);\n  \n        request.onsuccess = () => {\n          console.log(\"Alumno encontrado:\", request.result);\n          resolve(request.result);\n        };\n  \n        request.onerror = () => {\n          console.error(\"Error al obtener el alumno\");\n          reject(\"Alumno no encontrado\");\n        };\n      });\n    } catch (error) {\n      console.error(\"Error al abrir la base de datos:\", error);\n    }\n  };\n  \n  export const getAllAlumnos = async () => {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(\"alumnos\", \"readonly\");\n      const store = transaction.objectStore(\"alumnos\");\n      const request = store.getAll();\n  \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(\"No se pudieron obtener los alumnos\");\n    });\n  };\n  "],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAGA,CAAA,KAAM;EACxB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAE5CF,OAAO,CAACG,eAAe,GAAIC,KAAK,IAAK;MACnC,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAE9B,IAAI,CAACF,EAAE,CAACG,gBAAgB,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC5C,MAAMC,KAAK,GAAGL,EAAE,CAACM,iBAAiB,CAAC,SAAS,EAAE;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;QACjEF,KAAK,CAACG,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE;UAAEC,MAAM,EAAE;QAAM,CAAC,CAAC;MAC1D;IACF,CAAC;IAEDd,OAAO,CAACe,SAAS,GAAG,MAAMjB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACgB,OAAO,GAAG,MAAMjB,MAAM,CAAC,iCAAiC,CAAC;EACnE,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMkB,SAAS,GAAG,MAAOC,MAAM,IAAK;EACzC,MAAMb,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMoB,WAAW,GAAGd,EAAE,CAACc,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC;IAC1D,MAAMT,KAAK,GAAGS,WAAW,CAACC,WAAW,CAAC,SAAS,CAAC;IAChD,MAAMpB,OAAO,GAAGU,KAAK,CAACW,GAAG,CAACH,MAAM,CAAC;IAEjClB,OAAO,CAACe,SAAS,GAAG,MAAMjB,OAAO,CAAC,6BAA6B,CAAC;IAChEE,OAAO,CAACgB,OAAO,GAAG,MAAMjB,MAAM,CAAC,2BAA2B,CAAC;EAC7D,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMuB,SAAS,GAAG,MAAOC,4BAA4B,IAAK;EAC/DC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,4BAA4B,CAAC;EAErE,IAAI;IACF,MAAMlB,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;IACzB4B,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEpB,EAAE,CAAC;IAEzC,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMoB,WAAW,GAAGd,EAAE,CAACc,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC;MACzD,MAAMT,KAAK,GAAGS,WAAW,CAACC,WAAW,CAAC,SAAS,CAAC;MAChD,MAAMpB,OAAO,GAAGU,KAAK,CAACgB,GAAG,CAACH,4BAA4B,CAAC;MAEvDvB,OAAO,CAACe,SAAS,GAAG,MAAM;QACxBS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEzB,OAAO,CAACO,MAAM,CAAC;QACjDT,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;MACzB,CAAC;MAEDP,OAAO,CAACgB,OAAO,GAAG,MAAM;QACtBQ,OAAO,CAACG,KAAK,CAAC,4BAA4B,CAAC;QAC3C5B,MAAM,CAAC,sBAAsB,CAAC;MAChC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAO4B,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;EAC1D;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMvB,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMoB,WAAW,GAAGd,EAAE,CAACc,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC;IACzD,MAAMT,KAAK,GAAGS,WAAW,CAACC,WAAW,CAAC,SAAS,CAAC;IAChD,MAAMpB,OAAO,GAAGU,KAAK,CAACmB,MAAM,CAAC,CAAC;IAE9B7B,OAAO,CAACe,SAAS,GAAG,MAAMjB,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACgB,OAAO,GAAG,MAAMjB,MAAM,CAAC,oCAAoC,CAAC;EACtE,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}