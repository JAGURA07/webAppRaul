{"ast":null,"code":"export const openDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"AdminDB\", 1);\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Creamos un almacén de objetos llamado \"alumnos\" con \"uid\" como clave\n      if (!db.objectStoreNames.contains(\"alumnos\")) {\n        const store = db.createObjectStore(\"alumnos\", {\n          keyPath: \"uid\"\n        });\n        store.createIndex(\"nombre\", \"nombre\", {\n          unique: false\n        });\n      }\n    };\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(\"Error al abrir la base de datos\");\n  });\n};\n\n// Agregar un alumno a la base de datos\nexport const addAlumno = async alumno => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"alumnos\", \"readwrite\");\n    const store = transaction.objectStore(\"alumnos\");\n    const request = store.add(alumno);\n    request.onsuccess = () => resolve(\"Alumno registrado con éxito\");\n    request.onerror = () => reject(\"Error al registrar alumno\");\n  });\n};\n\n// Obtener un alumno por UID\nexport const getAlumno = async uid => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"alumnos\", \"readonly\");\n    const store = transaction.objectStore(\"alumnos\");\n    const request = store.get(uid);\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(\"Alumno no encontrado\");\n  });\n};\n\n// Obtener todos los alumnos\nexport const getAllAlumnos = async () => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"alumnos\", \"readonly\");\n    const store = transaction.objectStore(\"alumnos\");\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(\"No se pudieron obtener los alumnos\");\n  });\n};","map":{"version":3,"names":["openDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","store","createObjectStore","keyPath","createIndex","unique","onsuccess","onerror","addAlumno","alumno","transaction","objectStore","add","getAlumno","uid","get","getAllAlumnos","getAll"],"sources":["/home/jagura/Desktop/webapp/src/database/db.js"],"sourcesContent":["export const openDB = () => {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(\"AdminDB\", 1);\n  \n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n  \n        // Creamos un almacén de objetos llamado \"alumnos\" con \"uid\" como clave\n        if (!db.objectStoreNames.contains(\"alumnos\")) {\n          const store = db.createObjectStore(\"alumnos\", { keyPath: \"uid\" });\n          store.createIndex(\"nombre\", \"nombre\", { unique: false });\n        }\n      };\n  \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(\"Error al abrir la base de datos\");\n    });\n  };\n  \n  // Agregar un alumno a la base de datos\n  export const addAlumno = async (alumno) => {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(\"alumnos\", \"readwrite\");\n      const store = transaction.objectStore(\"alumnos\");\n      const request = store.add(alumno);\n  \n      request.onsuccess = () => resolve(\"Alumno registrado con éxito\");\n      request.onerror = () => reject(\"Error al registrar alumno\");\n    });\n  };\n  \n  // Obtener un alumno por UID\n  export const getAlumno = async (uid) => {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(\"alumnos\", \"readonly\");\n      const store = transaction.objectStore(\"alumnos\");\n      const request = store.get(uid);\n  \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(\"Alumno no encontrado\");\n    });\n  };\n  \n  // Obtener todos los alumnos\n  export const getAllAlumnos = async () => {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(\"alumnos\", \"readonly\");\n      const store = transaction.objectStore(\"alumnos\");\n      const request = store.getAll();\n  \n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(\"No se pudieron obtener los alumnos\");\n    });\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}